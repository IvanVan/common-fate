openapi: 3.0.0
info:
  title: Common Fate
  version: "1.0"
  contact:
    name: Common Fate
    url: "https://commonfate.io"
  description: Common Fate API
servers:
  - url: "http://localhost:8080"
paths:
  "/api/v1/requests/{requestId}/review":
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
    post:
      summary: Review a request
      operationId: user-review-request
      responses:
        "200":
          $ref: "#/components/responses/ReviewResponse"
      tags:
        - End User
      description: "Review an access request made by a user. The reviewing user must be an approver for a request. Users cannot review their own requests, even if they are an approver for the Access Rule."
      requestBody:
        $ref: "#/components/requestBodies/ReviewRequest"
  "/api/v1/requests/{requestid}/revoke":
    parameters:
      - schema:
          type: string
        name: requestid
        in: path
        required: true
    post:
      summary: Revoke an active request
      operationId: user-revoke-request
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      tags:
        - End User
      description: "Admins and approvers can revoke access previously approved. Effective immediately "
  "/api/v1/users/{userId}":
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get a user
      tags:
        - End User
      operationId: user-get-user
      description: Returns a Common Fate user.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /api/v1/users/me:
    get:
      summary: Get details for the current user
      tags:
        - End User
      operationId: user-get-me
      description: Returns information about the currently logged in user.
      responses:
        "200":
          $ref: "#/components/responses/AuthUserResponse"
        "401":
          description: Unauthorized
  /api/v1/admin/deployment/version:
    get:
      summary: Get deployment version details
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/DeploymentVersionResponse"
      operationId: admin-get-deployment-version
      description: Returns the version information
    parameters: []
  /api/v1/admin/access-rules:
    get:
      summary: List Access Rules
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListAccessRulesResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-list-access-rules
      description: List all access rules
      parameters:
        - schema:
            type: string
            enum:
              - ACTIVE
              - ARCHIVED
          in: query
          name: status
          description: Filter Access Rules by a particular status.
        - schema:
            type: string
          in: query
          name: nextToken
          description: Next page token
    post:
      summary: Create Access Rule
      operationId: admin-create-access-rule
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRule"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Create an access rule
      requestBody:
        $ref: "#/components/requestBodies/CreateAccessRuleRequest"
      tags:
        - Admin
    parameters: []
  "/api/v1/admin/access-rules/{ruleId}":
    get:
      summary: Get Access Rule
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRule"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-access-rule
      description: Get an Access Rule.
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    put:
      summary: Update Access Rule
      operationId: admin-update-access-rule
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRule"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      requestBody:
        $ref: "#/components/requestBodies/CreateAccessRuleRequest"
      description: Updates an Access Rule. Updating a rule creates a new version.
      tags:
        - Admin
  "/api/v1/admin/access-rules/{ruleId}/archive":
    parameters:
      - schema:
          type: string
        name: ruleId
        in: path
        required: true
    post:
      summary: Archive Access Rule
      operationId: admin-archive-access-rule
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRule"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: |-
        Marks an access rule as archived.
        Any pending requests for this access rule will be cancelled.
  /api/v1/admin/requests:
    get:
      summary: Your GET endpoint
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: admin-list-requests
      description: Return a list of all requests
      parameters:
        - schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
              - CANCELLED
              - PENDING
          in: query
          description: omit this param to view all results
          name: status
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
  "/api/v1/admin/users/{userId}":
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Update User
      operationId: admin-update-user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Update a user including group membership
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: string
              required:
                - groups
      tags:
        - Admin
  /api/v1/admin/users:
    get:
      summary: Returns a list of users
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/ListUserResponse"
      operationId: admin-list-users
      description: Fetch a list of users
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
    post:
      summary: Create User
      operationId: admin-create-user
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Create new user in the Cognito user pool if it is enabled.
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      tags:
        - Admin
  /api/v1/admin/groups:
    get:
      summary: List groups
      tags:
        - Admin
      operationId: admin-list-groups
      description: Lists all active groups
      responses:
        "200":
          $ref: "#/components/responses/ListGroupsResponse"
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
        - schema:
            type: string
            enum:
              - INTERNAL
              - EXTERNAL
          in: query
          name: source
    parameters: []
    post:
      summary: Create Group
      operationId: admin-create-group
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Create new group in the Cognito user pool if it is enabled.
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupRequest"
      tags:
        - Admin
  "/api/v1/admin/groups/{groupId}":
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: Get Group Details
      tags:
        - Admin
      operationId: admin-get-group
      description: Returns information for a group.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      summary: Update Group
      operationId: admin-update-group
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupRequest"
      description: Update a group
      tags:
        - Admin
    delete:
      summary: Delete Group
      operationId: admin-delete-group
      tags:
        - Admin
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Delete an internal group
  /api/v1/admin/identity/sync:
    parameters: []
    post:
      summary: Sync Identity
      operationId: admin-sync-identity
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Run the identity sync operation on demand
      tags:
        - Admin
  /api/v1/admin/identity:
    get:
      summary: Get identity configuration
      tags:
        - Admin
      responses:
        "200":
          $ref: "#/components/responses/IdentityConfigurationResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-identity-configuration
      description: Get information about the identity configuration
  "/api/v1/admin/handlers/{id}":
    get:
      summary: Get handler
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TGHandler"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-handler
      tags:
        - Admin
      description: ""
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: ""
      operationId: admin-delete-handler
      responses:
        "204":
          description: Returns no content
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Removes a handler
      tags:
        - Admin
  /api/v1/admin/handlers:
    get:
      summary: Get handlers
      responses:
        "200":
          $ref: "#/components/responses/ListHandlersResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-list-handlers
      description: ""
      tags:
        - Admin
    post:
      summary: Register a handler
      operationId: admin-register-handler
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TGHandler"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      requestBody:
        $ref: "#/components/requestBodies/RegisterHandlerRequest"
      tags:
        - Admin
      description: ""
    parameters: []
  "/api/v1/admin/target-groups/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get target group (detailed)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetGroup"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-get-target-group
      tags:
        - Admin
    delete:
      summary: delete target group
      operationId: admin-delete-target-group
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: delete target group
      tags:
        - Admin
  /api/v1/admin/target-groups:
    get:
      summary: Get target groups
      responses:
        "200":
          $ref: "#/components/responses/ListTargetGroupResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: admin-list-target-groups
      tags:
        - Admin
    post:
      summary: Create target group
      operationId: admin-create-target-group
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetGroup"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "409":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      requestBody:
        $ref: "#/components/requestBodies/CreateTargetGroupRequest"
      tags:
        - Admin
    parameters: []
  "/api/v1/admin/target-groups/{id}/link":
    parameters:
      - schema:
          type: string
        name: id
        description: Target group ID
        in: path
        required: true
    post:
      summary: Link a target group deployment to its target group
      operationId: admin-create-target-group-link
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetRoute"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      requestBody:
        $ref: "#/components/requestBodies/CreateTargetGroupLink"
      tags:
        - Admin
  "/api/v1/admin/target-groups/{id}/unlink":
    parameters:
      - schema:
          type: string
        name: id
        description: Target group ID
        in: path
        required: true
    post:
      summary: Unlink a target group deployment from its target group
      operationId: admin-remove-target-group-link
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      parameters:
        - schema:
            type: string
          in: query
          name: deploymentId
          required: true
        - schema:
            type: string
          in: query
          name: kind
          required: true
      description: ""
      tags:
        - Admin
  "/api/v1/admin/target-groups/{id}/routes":
    parameters:
      - schema:
          type: string
        name: id
        description: Target group ID
        in: path
        required: true
    get:
      summary: ""
      operationId: admin-list-target-routes
      responses:
        "200":
          $ref: "#/components/responses/ListTargetGroupRoutes"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Lists all routes for a given Target Group
  /api/v1/admin/healthcheck-handlers:
    post:
      summary: Healthcheck Handlers
      operationId: admin-healthcheck-handlers
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Runs the healthcheck for handlers
      tags:
        - Admin
    parameters: []
  /api/v1/entitlements:
    get:
      summary: List Entitlements
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListTargetGroupResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-list-entitlements
      description: |-
        List all entitlement kinds configured in Common Fate.
        These are derived from the Target Groups.
  /api/v1/entitlements/targets:
    get:
      summary: List Entitlement Resources
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListTargetsResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-list-entitlement-targets
      description: List all targets that the user has access to
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: query
    parameters: []
  /api/v1/requests:
    get:
      summary: List Requests
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-list-requests
      description: Gets all requests availiable
      parameters:
        - schema:
            type: string
            enum:
              - APPROVED
              - DECLINED
              - CANCELLED
              - PENDING
          in: query
          name: status
          description: omit this param to view all results
        - schema:
            type: boolean
          in: query
          name: reviewer
          description: "show requests that the user is a reviewer for, rather than requests that the user has made themselves"
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
    parameters: []
    post:
      summary: ""
      operationId: user-post-requests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Initiates the granting process for a group of requests
      requestBody:
        $ref: "#/components/requestBodies/CreateAccessRequestRequest"
  /api/v1/requests/upcoming:
    get:
      summary: Your GET endpoint
      tags:
        - End User
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: user-list-requests-upcoming
      description: Display pending requests and approved requests that are currently active or scheduled to begin some time in future.
      parameters:
        - schema:
            type: string
          in: query
          description: encrypted token containing pagination info
          name: nextToken
  /api/v1/requests/past:
    get:
      summary: Your GET endpoint
      tags:
        - End User
      responses:
        "200":
          $ref: "#/components/responses/ListRequestsResponse"
      operationId: user-list-requests-past
      description: |
        Display show cancelled, expired, and revoked requests.
      parameters:
        - schema:
            type: string
          in: query
          name: nextToken
          description: encrypted token containing pagination info
  /api/v1/preflight:
    parameters: []
    post:
      summary: Submit Preflight
      operationId: user-request-preflight
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preflight"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      description: Verify and validate a collection of request items
      requestBody:
        $ref: "#/components/requestBodies/CreatePreflightRequest"
  "/api/v1/requests/{requestId}":
    get:
      summary: Get Request
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Preflight"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-request
      description: Gets information for a request
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
  "/api/v1/requests/{requestId}/groups":
    get:
      summary: List Request Access Groups
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListAccessGroupsResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-list-request-access-groups
      description: Gets all access groups availiable
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
  "/api/v1/requests/{requestId}/groups/{groupId}":
    get:
      summary: Get Request Access Group
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAccessGroup"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-request-access-group
      description: Gets access group
    parameters:
      - schema:
          type: string
        name: requestId
        in: path
        required: true
      - schema:
          type: string
        name: groupId
        in: path
        required: true
  "/api/v1/groups/{groupId}/grants":
    get:
      summary: List Request Access Group Grants
      tags: []
      responses:
        "200":
          $ref: "#/components/responses/ListGrantsResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-list-request-access-group-grants
      description: List all grants for a request access group
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
  "/api/v1/groups/{gid}/grants{grantid}":
    get:
      summary: Get Request Access Group Grant
      tags: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestAccessGroupTarget"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      operationId: user-get-request-access-group-grant
      description: Gets a request access group grant
    parameters:
      - schema:
          type: string
        name: gid
        in: path
        required: true
        description: access group id
      - schema:
          type: string
        name: grantid
        in: path
        required: true
        description: grant id
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        Josh:
          id: string
          email: string
          name: string
          picture: "https://avatars.githubusercontent.com/u/17420369?v=4"
        Chris:
          id: string
          email: chris@commonfate.io
          name: Chris Norman
          picture: "https://avatars.githubusercontent.com/u/14214200?v=4"
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        picture:
          type: string
        status:
          $ref: "#/components/schemas/IdpStatus"
        lastName:
          type: string
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
        groups:
          type: array
          items:
            type: string
      required:
        - id
        - email
        - firstName
        - picture
        - status
        - lastName
        - updatedAt
        - groups
    Group:
      title: Group
      type: object
      description: ""
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
        memberCount:
          type: integer
        members:
          type: array
          items:
            type: string
        source:
          type: string
      required:
        - name
        - description
        - id
        - memberCount
        - members
        - source
    IdpStatus:
      type: string
      title: IdpStatus
      x-stoplight:
        id: a3fdr17gch04a
      enum:
        - ARCHIVED
        - ACTIVE
    AccessRule:
      title: AccessRule
      type: object
      description: AccessRule contains detailed information about a rule and is used in administrative apis.
      properties:
        id:
          type: string
          x-go-name: ID
          example: rul_28w2Eebt2Q8nFQJ2dKa1FTE9X0J
        status:
          $ref: "#/components/schemas/AccessRuleStatus"
        name:
          type: string
          example: Okta admin
        description:
          type: string
          example: Admin access to Okta
        targets:
          type: array
          items:
            $ref: "#/components/schemas/AccessRuleTarget"
        timeConstraints:
          $ref: "#/components/schemas/AccessRuleTimeConstraints"
        groups:
          description: The group IDs that the access rule applies to.
          type: array
          items:
            type: string
        approval:
          $ref: "#/components/schemas/AccessRuleApproverConfig"
        metadata:
          $ref: "#/components/schemas/AccessRuleMetadata"
      required:
        - id
        - status
        - name
        - description
        - targets
        - timeConstraints
        - groups
        - approval
        - metadata
    AccessRuleStatus:
      type: string
      description: The status of an Access Rule.
      enum:
        - ACTIVE
        - ARCHIVED
      title: AccessRuleStatus
    AccessRuleMetadata:
      title: AccessRuleMetadata
      type: object
      properties:
        createdAt:
          type: string
          x-go-type: time.Time
        createdBy:
          type: string
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
        updatedBy:
          type: string
        updateMessage:
          type: string
      required:
        - createdAt
        - createdBy
        - updatedAt
        - updatedBy
    AccessRuleApproverConfig:
      title: ApproverConfig
      type: object
      description: Approver config for access rules
      properties:
        users:
          type: array
          description: The user IDs of the approvers for the request.
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      required:
        - users
        - groups
      x-stoplight:
        id: 4f87f733cb70f
    AccessRuleTimeConstraints:
      title: TimeConstraints
      type: object
      description: Time configuration for an Access Rule.
      properties:
        maxDurationSeconds:
          type: integer
          description: The maximum duration in seconds the access is allowed for.
          minimum: 60
          exclusiveMinimum: false
          maximum: 15724800
      required:
        - maxDurationSeconds
      x-stoplight:
        id: 1fe6870129392
    CreateAccessRuleTarget:
      title: CreateAccessRuleTarget
      type: object
      description: a request body for creating a Access Rule Target
      properties:
        targetGroupId:
          type: string
        fieldFilterExpessions:
          type: object
      required:
        - targetGroupId
        - fieldFilterExpessions
    AccessRuleTarget:
      title: AccessRuleTarget
      type: object
      description: a request body for an Access Rule Target
      x-stoplight:
        id: d39d43ed71c33
      properties:
        targetGroup:
          $ref: "#/components/schemas/TargetGroup"
        fieldFilterExpessions:
          type: object
      required:
        - targetGroup
        - fieldFilterExpessions
    TGHandler:
      title: TGHandler
      x-stoplight:
        id: dfd783fec606a
      type: object
      x-tags:
        - Target Groups
      properties:
        id:
          type: string
        runtime:
          type: string
        functionArn:
          type: string
        awsAccount:
          type: string
        awsRegion:
          type: string
        healthy:
          type: boolean
        diagnostics:
          type: array
          items:
            $ref: "#/components/schemas/Diagnostic"
      required:
        - id
        - runtime
        - functionArn
        - awsAccount
        - awsRegion
        - healthy
        - diagnostics
      description: |-
        Handler represents a deployment of a provider. 
        Handlers can be linked to target groups via routes
    TargetGroup:
      title: TargetGroup
      x-stoplight:
        id: wcyzfn1kp9xkx
      type: object
      properties:
        id:
          type: string
        schema:
          $ref: "#/components/schemas/TargetGroupSchema"
        from:
          $ref: "#/components/schemas/TargetGroupFrom"
        icon:
          type: string
        createdAt:
          type: string
          x-go-type: time.Time
        updatedAt:
          type: string
          x-go-type: time.Time
          format: time
      required:
        - id
        - schema
        - from
        - icon
    TargetGroupFrom:
      title: TargetGroupFrom
      x-stoplight:
        id: 1beeb9df4c57d
      type: object
      properties:
        publisher:
          type: string
        name:
          type: string
        version:
          type: string
        kind:
          type: string
      required:
        - publisher
        - name
        - version
        - kind
      description: Specifies a particular Access Provider to create a Target Group schema from.
    TargetGroupSchema:
      title: Target Group Schema
      x-stoplight:
        id: 7ba34eb453d65
      type: object
      additionalProperties:
        $ref: "#/components/schemas/TargetGroupSchemaArgument"
    TargetGroupSchemaArgument:
      title: Target Group Schema Argument
      x-stoplight:
        id: 674a9bde14c32
      type: object
      description: "Define the metadata, data type and UI elements for the argument"
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
      required:
        - id
        - title
    TargetRoute:
      type: object
      x-stoplight:
        id: a3339ab311211
      title: TargetRoute
      properties:
        targetGroupId:
          type: string
        handlerId:
          type: string
        kind:
          type: string
        priority:
          type: integer
        valid:
          type: boolean
        diagnostics:
          type: array
          items:
            $ref: "#/components/schemas/Diagnostic"
      required:
        - targetGroupId
        - handlerId
        - kind
        - priority
        - valid
        - diagnostics
    Diagnostic:
      title: Diagnostic
      x-stoplight:
        id: fb62cbb9bc444
      type: object
      properties:
        level:
          $ref: "#/components/schemas/LogLevel"
        code:
          type: string
        message:
          type: string
      required:
        - level
        - code
        - message
    LogLevel:
      title: LogLevel
      x-stoplight:
        id: pcykc8l1vd4o2
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR
    Preflight:
      title: Preflight
      x-stoplight:
        id: o88cq9el7rshq
      type: object
      properties:
        id:
          type: string
        accessGroups:
          type: array
          items:
            $ref: "#/components/schemas/PreflightAccessGroup"
        createdAt:
          type: string
          x-go-type: time.Time
      required:
        - id
        - accessGroups
        - createdAt
    PreflightAccessGroup:
      title: PreflightAccessGroup
      type: object
      x-stoplight:
        id: 9f3a10a488434
      properties:
        id:
          type: string
        requiresApproval:
          type: boolean
        time:
          $ref: "#/components/schemas/AccessRuleTimeConstraints"
        targets:
          type: array
          items:
            $ref: "#/components/schemas/Target"
      required:
        - id
        - requiresApproval
        - time
        - targets
    Target:
      title: Target
      x-stoplight:
        id: 9wq5hjssi6r46
      type: object
      properties:
        id:
          type: string
        targetGroupId:
          type: string
        targetGroupFrom:
          $ref: "#/components/schemas/TargetGroupFrom"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/TargetField"
      required:
        - id
        - targetGroupId
        - targetGroupFrom
        - fields
      x-examples:
        Example 1:
          id: string
          targetGroupId: string
          targetGroupFrom:
            publisher: string
            name: string
            version: string
            kind: string
          fields:
            - id: string
              fieldTitle: string
              fieldDescription: string
              valueLabel: string
              valueDescription: string
              value: string
    TargetField:
      title: Field
      x-stoplight:
        id: 1b07f4c301de5
      type: object
      properties:
        id:
          type: string
        fieldTitle:
          type: string
        fieldDescription:
          type: string
        valueLabel:
          type: string
        valueDescription:
          type: string
        value:
          type: string
      required:
        - id
        - fieldTitle
        - valueLabel
        - value
    Request:
      title: Request
      type: object
      description: A request to access something made by an end user in Common Fate.
      x-examples:
        Example 1:
          id: string
          purpose:
            reason: string
          accessGroups:
            - id: string
              requestId: string
              status: APPROVED
              time:
                maxDurationSeconds: 60
              overrideTiming:
                durationSeconds: 0
                startTime: "14:15:22Z"
              updatedAt: string
              createdAt: string
              targets:
                - id: string
                  requestId: string
                  accessGroupId: string
                  targetGroupId: string
                  targetGroupFrom:
                    publisher: string
                    name: string
                    version: string
                    kind: string
                  fields:
                    - id: string
                      fieldTitle: string
                      fieldDescription: string
                      valueLabel: string
                      valueDescription: string
                      value: string
                  status: PENDING
          requestedBy: string
          requestedAt: "14:15:22Z"
      properties:
        id:
          type: string
          x-go-name: ID
        purpose:
          $ref: "#/components/schemas/RequestPurpose"
        accessGroups:
          type: array
          items:
            $ref: "#/components/schemas/RequestAccessGroup"
        requestedBy:
          type: string
        requestedAt:
          type: string
          x-go-type: time.Time
          format: time
        status:
          $ref: "#/components/schemas/RequestStatus"
      required:
        - id
        - purpose
        - accessGroups
        - requestedBy
        - requestedAt
        - status
    RequestPurpose:
      title: RequestContext
      type: object
      x-stoplight:
        id: 169e2b3eec7f8
      properties:
        reason:
          type: string
    RequestStatus:
      type: string
      description: |
        The status of an Access Request.
      enum:
        - CANCELLED
        - REVOKED
        - PENDING
        - COMPLETE
        - ACTIVE
      title: RequestStatus
    RequestEvent:
      title: RequestEvent
      x-stoplight:
        id: x15z5qclesdq9
      type: object
      properties:
        id:
          type: string
        requestId:
          type: string
        createdAt:
          type: string
          x-go-type: time.Time
          format: time
        actor:
          type: string
        fromStatus:
          $ref: "#/components/schemas/RequestStatus"
        toStatus:
          $ref: "#/components/schemas/RequestStatus"
        fromTiming:
          $ref: "#/components/schemas/RequestAccessGroupTiming"
        toTiming:
          $ref: "#/components/schemas/RequestAccessGroupTiming"
        fromGrantStatus:
          $ref: "#/components/schemas/RequestAccessGroupTargetStatus"
        toGrantStatus:
          $ref: "#/components/schemas/RequestAccessGroupTargetStatus"
        grantCreated:
          type: boolean
        requestCreated:
          type: boolean
        grantFailureReason:
          type: string
        recordedEvent:
          type: object
          x-go-type: "map[string]string"
          description: An event which was recorded relating to the grant.
      required:
        - id
        - requestId
        - createdAt
    RequestAccessGroup:
      title: AccessGroup
      x-stoplight:
        id: 34f262dc0fd95
      type: object
      properties:
        id:
          type: string
        requestId:
          type: string
        status:
          $ref: "#/components/schemas/RequestAccessGroupStatus"
        time:
          $ref: "#/components/schemas/RequestAccessGroupTiming"
        overrideTiming:
          $ref: "#/components/schemas/RequestAccessGroupTiming"
        updatedAt:
          type: string
          x-go-type: time.Time
        createdAt:
          type: string
          x-go-type: time.Time
        targets:
          type: array
          items:
            $ref: "#/components/schemas/RequestAccessGroupTarget"
        approvalMethod:
          $ref: "#/components/schemas/RequestAccessGroupApprovalMethod"
      required:
        - id
        - requestId
        - status
        - time
        - overrideTiming
        - updatedAt
        - createdAt
        - targets
    RequestAccessGroupApprovalMethod:
      type: string
      description: "Describes whether a request has been approved automatically or from a review "
      title: ApprovalMethod
      x-stoplight:
        id: b183b2aaba142
      enum:
        - AUTOMATIC
        - REVIEWED
    RequestAccessGroupStatus:
      type: string
      description: |
        The status of an Access Request.
      enum:
        - DECLINED
        - APPROVED
        - PENDING_APPROVAL
      title: RequestStatus
      x-stoplight:
        id: e1005d029a08c
    RequestAccessGroupTiming:
      title: RequestAccessGroupTiming
      x-stoplight:
        id: 5156ae0f9bb5b
      type: object
      properties:
        durationSeconds:
          type: integer
        startTime:
          type: string
          description: iso8601 timestamp in UTC timezone
          x-go-type: time.Time
          format: time
      required:
        - durationSeconds
    RequestAccessGroupTarget:
      description: A temporary assignment of a user to a principal.
      type: object
      title: Access Group Target
      x-examples:
        Okta:
          id: aba0dcba-0a8c-4393-ad92-69510326b29a
          status: PENDING
          subject: user@example.com
          provider: okta
          with:
            group: Admins
          start: "2022-06-13T03:39:30.921Z"
          end: "2022-06-13T11:39:30.921Z"
      x-stoplight:
        id: 3d80288c0358c
      properties:
        id:
          type: string
        requestId:
          type: string
        accessGroupId:
          type: string
        targetGroupId:
          type: string
        targetGroupFrom:
          $ref: "#/components/schemas/TargetGroupFrom"
        fields:
          type: array
          items:
            $ref: "#/components/schemas/TargetField"
        status:
          $ref: "#/components/schemas/RequestAccessGroupTargetStatus"
      required:
        - id
        - requestId
        - accessGroupId
        - targetGroupId
        - targetGroupFrom
        - fields
        - status
    RequestAccessGroupTargetStatus:
      type: string
      description: |
        The status of a grant.
      title: RequestAccessGroupTargetStatus
      x-stoplight:
        id: 92eb004906577
      enum:
        - PENDING_PROVISIONING
        - AWAITING_START
        - ACTIVE
        - ERROR
        - REVOKED
        - EXPIRED
    RequestAccessGroupTargetAccessInstructions:
      title: AccessInstructions
      x-stoplight:
        id: 96aacba377a2b
      type: object
      description: |-
        Instructions on how to access the requested resource.

        The `instructions` field will be null if no instructions are available.
      properties:
        instructions:
          description: Instructions on how to access the role or resource.
          type: string
    ReviewDecision:
      type: string
      title: ReviewDecision
      enum:
        - APPROVED
        - DECLINED
      description: A decision made on an Access Request.
    CreateAccessRequestGroupOptions:
      type: object
      title: CreateAccessRequestGroupOptions
      enum:
        - APPROVED
        - DECLINED
      description: ""
      x-stoplight:
        id: 6f6c2fa4da748
      properties:
        id:
          type: string
        timing:
          $ref: "#/components/schemas/RequestAccessGroupTiming"
      required:
        - id
        - timing
  responses:
    ErrorResponse:
      description: An error returned from the service.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
            required:
              - error
          examples: {}
    ListUserResponse:
      description: Paginated list of users
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: "#/components/schemas/User"
              next:
                type: string
                nullable: true
            required:
              - users
              - next
          examples: {}
    ListAccessRulesResponse:
      description: A list of Access Rules.
      content:
        application/json:
          schema:
            type: object
            properties:
              accessRules:
                type: array
                items:
                  $ref: "#/components/schemas/AccessRule"
              next:
                type: string
                nullable: true
            required:
              - accessRules
              - next
    ListRequestsResponse:
      description: Paginated list of Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              requests:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
              next:
                type: string
                nullable: true
            required:
              - requests
              - next
    ListGroupsResponse:
      description: Returns a list of Groups
      content:
        application/json:
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
              next:
                type: string
                nullable: true
            required:
              - groups
              - next
    ReviewResponse:
      description: Response for reviewing a request.
      content:
        application/json:
          schema:
            type: object
            properties:
              request:
                $ref: "#/components/schemas/Request"
    AuthUserResponse:
      description: Details about the authenticated user
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/User"
              isAdmin:
                description: Whether the user is an administrator of Common Fate.
                type: boolean
            required:
              - user
              - isAdmin
    ListRequestEventsResponse:
      description: Paginated list of RequestEvent
      content:
        application/json:
          schema:
            type: object
            properties:
              events:
                type: array
                items:
                  $ref: "#/components/schemas/RequestEvent"
              next:
                type: string
                nullable: true
            required:
              - events
              - next
    IdentityConfigurationResponse:
      description: Returns information about the identity configuration of this deployment.
      content:
        application/json:
          schema:
            type: object
            properties:
              identityProvider:
                type: string
              administratorGroupId:
                type: string
            required:
              - identityProvider
              - administratorGroupId
    DeploymentVersionResponse:
      description: Deployment version information.
      content:
        application/json:
          schema:
            type: object
            properties:
              version:
                type: string
                description: 'The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.'
            required:
              - version
    ListAccessGroupsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  $ref: "#/components/schemas/RequestAccessGroup"
              next:
                type: string
            required:
              - groups
    ListTargetGroupResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              targetGroups:
                type: array
                items:
                  $ref: "#/components/schemas/TargetGroup"
              next:
                type: string
            required:
              - targetGroups
    ListHandlersResponse:
      description: Response obj for ListTargetGroupDeploymentAPIResponse
      content:
        application/json:
          schema:
            type: object
            properties:
              res:
                type: array
                items:
                  $ref: "#/components/schemas/TGHandler"
              next:
                type: string
            required:
              - res
              - next
    ListTargetGroupRoutes:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              routes:
                type: array
                items:
                  $ref: "#/components/schemas/TargetRoute"
              next:
                type: string
            required:
              - routes
    ListGrantsResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  $ref: "#/components/schemas/RequestAccessGroupTarget"
              next:
                type: string
            required:
              - grants
    ListTargetsResponse:
      description: list of target entitlements for a user
      content:
        application/json:
          schema:
            type: object
            properties:
              targets:
                type: array
                items:
                  $ref: "#/components/schemas/Target"
              next:
                type: string
            required:
              - targets
  examples: {}
  securitySchemes: {}
  requestBodies:
    CreateAccessRuleRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              groups:
                description: The group IDs that the access rule applies to.
                type: array
                items:
                  type: string
              approval:
                $ref: "#/components/schemas/AccessRuleApproverConfig"
              name:
                type: string
                example: Okta admin
                pattern: '[a-zA-Z0-9,.;:()[\]?!\-_`~&/\n\s]'
                minLength: 1
                maxLength: 400
              description:
                type: string
                example: Admin access to Okta
                pattern: '[a-zA-Z0-9,.;:()[\]?!\-_`~&/\n\s]|^$'
                minLength: 0
                maxLength: 2048
              timeConstraints:
                $ref: "#/components/schemas/AccessRuleTimeConstraints"
              targets:
                type: array
                items:
                  $ref: "#/components/schemas/CreateAccessRuleTarget"
            required:
              - groups
              - approval
              - name
              - description
              - timeConstraints
              - targets
    CreateUserRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                minLength: 1
                maxLength: 2048
              firstName:
                type: string
                minLength: 1
                maxLength: 2048
                pattern: '[a-zA-Z0-9,.;:()[\]?!\-_`~&/\n\s]'
              lastName:
                type: string
                minLength: 1
                maxLength: 2048
                pattern: '[a-zA-Z0-9,.;:()[\]?!\-_`~&/\n\s]'
              isAdmin:
                type: boolean
            required:
              - email
              - firstName
              - lastName
              - isAdmin
      description: ""
    ReviewRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              decision:
                $ref: "#/components/schemas/ReviewDecision"
              comment:
                type: string
                minLength: 0
                maxLength: 2048
              overrideTiming:
                $ref: "#/components/schemas/RequestAccessGroupTiming"
            required:
              - decision
      description: |-
        An approver's review of an Access Request.
        The access request timing can be overriden by including override timing in the request body.
        If it is omitted, the original request timing will be used.
    CreateGroupRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                pattern: "^[a-zA-Z0-9_.-]"
                maxLength: 2048
              description:
                type: string
                minLength: 0
                maxLength: 2048
              members:
                type: array
                items:
                  type: string
            required:
              - name
              - members
    CreateTargetGroupRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              from:
                $ref: "#/components/schemas/TargetGroupFrom"
              id:
                type: string
                maxLength: 64
                pattern: "^[-a-zA-Z0-9]*$"
            required:
              - from
              - id
    RegisterHandlerRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: "The ID of the target group to deploy to. User, provided"
                pattern: "^[-a-zA-Z0-9]*$"
                maxLength: 64
              runtime:
                type: string
                default: aws-lambda
              awsAccount:
                type: string
                pattern: "^[0-9]{12}"
              awsRegion:
                type: string
                pattern: ^(us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d$
                minLength: 9
                example: us-east-1
            required:
              - id
              - runtime
              - awsAccount
              - awsRegion
    CreateTargetGroupLink:
      content:
        application/json:
          schema:
            type: object
            properties:
              deploymentId:
                type: string
              priority:
                type: integer
                maximum: 999
                minimum: 0
              kind:
                type: string
            required:
              - deploymentId
              - priority
              - kind
    CreatePreflightRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              targets:
                type: array
                items:
                  type: string
            required:
              - targets
        application/xml:
          schema:
            type: object
            properties: {}
    CreateAccessRequestRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              preflightId:
                type: string
              groupOptions:
                type: array
                items:
                  $ref: "#/components/schemas/CreateAccessRequestGroupOptions"
              reason:
                type: string
            required:
              - preflightId
              - groupOptions
tags:
  - name: End User
  - name: Admin
  - name: Target Groups
