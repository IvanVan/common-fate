/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ListTargetGroupRoutesResponse,
  ErrorResponseResponse,
  ListTargetGroupResponseResponse,
  ListResourcesResponseResponse,
  UserListEntitlementResourcesParams,
  ListTargetsResponseResponse,
  UserListEntitlementTargetsParams,
  ListRequests2ResponseResponse,
  UserListRequestsParams,
  CreateRequestRequestv2Body,
  PreflightResponseResponse,
  CreatePreflightRequestBody,
  Requestv2,
  ListAccessGroupsResponseResponse,
  AccessGroup,
  ListGrantsv2ResponseResponse,
  Grantv2
} from '.././types'
import { customInstance } from '../../custom-instance'
import type { ErrorType } from '../../custom-instance'


  
  // eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Lists all routes for a given Target Group
 */
export const adminListTargetRoutes = (
    id: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupRoutesResponse>(
      {url: `/api/v1/admin/target-groups/${id}/routes`, method: 'get'
    },
      options);
    }
  

export const getAdminListTargetRoutesKey = (id: string,) => [`/api/v1/admin/target-groups/${id}/routes`];

    
export type AdminListTargetRoutesQueryResult = NonNullable<Awaited<ReturnType<typeof adminListTargetRoutes>>>
export type AdminListTargetRoutesQueryError = ErrorType<ErrorResponseResponse>

export const useAdminListTargetRoutes = <TError = ErrorType<ErrorResponseResponse>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof adminListTargetRoutes>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAdminListTargetRoutesKey(id) : null);
  const swrFn = () => adminListTargetRoutes(id, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all entitlement kinds configured in Common Fate.
These are derived from the Target Groups.
 * @summary List Entitlements
 */
export const userListEntitlements = (
    
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetGroupResponseResponse>(
      {url: `/api/v1/entitlements`, method: 'get'
    },
      options);
    }
  

export const getUserListEntitlementsKey = () => [`/api/v1/entitlements`];

    
export type UserListEntitlementsQueryResult = NonNullable<Awaited<ReturnType<typeof userListEntitlements>>>
export type UserListEntitlementsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListEntitlements = <TError = ErrorType<ErrorResponseResponse>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListEntitlements>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListEntitlementsKey() : null);
  const swrFn = () => userListEntitlements(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all resources for a given entitlement and resource type
 * @summary List Entitlement Resources
 */
export const userListEntitlementResources = (
    params: UserListEntitlementResourcesParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListResourcesResponseResponse>(
      {url: `/api/v1/entitlements/resources`, method: 'get',
        params
    },
      options);
    }
  

export const getUserListEntitlementResourcesKey = (params: UserListEntitlementResourcesParams,) => [`/api/v1/entitlements/resources`, ...(params ? [params]: [])];

    
export type UserListEntitlementResourcesQueryResult = NonNullable<Awaited<ReturnType<typeof userListEntitlementResources>>>
export type UserListEntitlementResourcesQueryError = ErrorType<ErrorResponseResponse>

export const useUserListEntitlementResources = <TError = ErrorType<ErrorResponseResponse>>(
 params: UserListEntitlementResourcesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListEntitlementResources>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListEntitlementResourcesKey(params) : null);
  const swrFn = () => userListEntitlementResources(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all targets that the user has access to
 * @summary List Entitlement Resources
 */
export const userListEntitlementTargets = (
    params?: UserListEntitlementTargetsParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListTargetsResponseResponse>(
      {url: `/api/v1/entitlements/targets`, method: 'get',
        params
    },
      options);
    }
  

export const getUserListEntitlementTargetsKey = (params?: UserListEntitlementTargetsParams,) => [`/api/v1/entitlements/targets`, ...(params ? [params]: [])];

    
export type UserListEntitlementTargetsQueryResult = NonNullable<Awaited<ReturnType<typeof userListEntitlementTargets>>>
export type UserListEntitlementTargetsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListEntitlementTargets = <TError = ErrorType<ErrorResponseResponse>>(
 params?: UserListEntitlementTargetsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListEntitlementTargets>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListEntitlementTargetsKey(params) : null);
  const swrFn = () => userListEntitlementTargets(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Gets all requests availiable
 * @summary List Requests
 */
export const userListRequests = (
    params?: UserListRequestsParams,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListRequests2ResponseResponse>(
      {url: `/api/v1/requests`, method: 'get',
        params
    },
      options);
    }
  

export const getUserListRequestsKey = (params?: UserListRequestsParams,) => [`/api/v1/requests`, ...(params ? [params]: [])];

    
export type UserListRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof userListRequests>>>
export type UserListRequestsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListRequests = <TError = ErrorType<ErrorResponseResponse>>(
 params?: UserListRequestsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListRequests>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListRequestsKey(params) : null);
  const swrFn = () => userListRequests(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Initiates the granting process for a group of requests
 */
export const userPostRequests = (
    createRequestRequestv2Body: CreateRequestRequestv2Body,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<void>(
      {url: `/api/v1/requests`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createRequestRequestv2Body
    },
      options);
    }
  

/**
 * Verify and validate a collection of request items
 */
export const userRequestPreflight = (
    createPreflightRequestBody: CreatePreflightRequestBody,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<PreflightResponseResponse>(
      {url: `/api/v1/requests/preflight`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createPreflightRequestBody
    },
      options);
    }
  

/**
 * Gets information for a request
 * @summary Get Request
 */
export const userGetRequest = (
    requestId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Requestv2>(
      {url: `/api/v1/requests/${requestId}`, method: 'get'
    },
      options);
    }
  

export const getUserGetRequestKey = (requestId: string,) => [`/api/v1/requests/${requestId}`];

    
export type UserGetRequestQueryResult = NonNullable<Awaited<ReturnType<typeof userGetRequest>>>
export type UserGetRequestQueryError = ErrorType<ErrorResponseResponse>

export const useUserGetRequest = <TError = ErrorType<ErrorResponseResponse>>(
 requestId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userGetRequest>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(requestId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserGetRequestKey(requestId) : null);
  const swrFn = () => userGetRequest(requestId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Gets all access groups availiable
 * @summary List Request Access Groups
 */
export const userListRequestAccessGroups = (
    requestId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListAccessGroupsResponseResponse>(
      {url: `/api/v1/requests/${requestId}/groups`, method: 'get'
    },
      options);
    }
  

export const getUserListRequestAccessGroupsKey = (requestId: string,) => [`/api/v1/requests/${requestId}/groups`];

    
export type UserListRequestAccessGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof userListRequestAccessGroups>>>
export type UserListRequestAccessGroupsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListRequestAccessGroups = <TError = ErrorType<ErrorResponseResponse>>(
 requestId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListRequestAccessGroups>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(requestId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListRequestAccessGroupsKey(requestId) : null);
  const swrFn = () => userListRequestAccessGroups(requestId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Gets access group
 * @summary Get Request Access Group
 */
export const userGetRequestAccessGroup = (
    requestId: string,
    groupId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<AccessGroup>(
      {url: `/api/v1/requests/${requestId}/groups/${groupId}`, method: 'get'
    },
      options);
    }
  

export const getUserGetRequestAccessGroupKey = (requestId: string,
    groupId: string,) => [`/api/v1/requests/${requestId}/groups/${groupId}`];

    
export type UserGetRequestAccessGroupQueryResult = NonNullable<Awaited<ReturnType<typeof userGetRequestAccessGroup>>>
export type UserGetRequestAccessGroupQueryError = ErrorType<ErrorResponseResponse>

export const useUserGetRequestAccessGroup = <TError = ErrorType<ErrorResponseResponse>>(
 requestId: string,
    groupId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userGetRequestAccessGroup>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(requestId && groupId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserGetRequestAccessGroupKey(requestId,groupId) : null);
  const swrFn = () => userGetRequestAccessGroup(requestId,groupId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * List all grants for a request access group
 * @summary List Request Access Group Grants
 */
export const userListRequestAccessGroupGrants = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<ListGrantsv2ResponseResponse>(
      {url: `/api/v1/groups/${groupId}/grants`, method: 'get'
    },
      options);
    }
  

export const getUserListRequestAccessGroupGrantsKey = (groupId: string,) => [`/api/v1/groups/${groupId}/grants`];

    
export type UserListRequestAccessGroupGrantsQueryResult = NonNullable<Awaited<ReturnType<typeof userListRequestAccessGroupGrants>>>
export type UserListRequestAccessGroupGrantsQueryError = ErrorType<ErrorResponseResponse>

export const useUserListRequestAccessGroupGrants = <TError = ErrorType<ErrorResponseResponse>>(
 groupId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userListRequestAccessGroupGrants>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(groupId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserListRequestAccessGroupGrantsKey(groupId) : null);
  const swrFn = () => userListRequestAccessGroupGrants(groupId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Gets a request access group grant
 * @summary Get Request Access Group Grant
 */
export const userGetRequestAccessGroupGrant = (
    gid: string,
    grantid: string,
 options?: SecondParameter<typeof customInstance>) => {
      return customInstance<Grantv2>(
      {url: `/api/v1/groups/${gid}/grants${grantid}`, method: 'get'
    },
      options);
    }
  

export const getUserGetRequestAccessGroupGrantKey = (gid: string,
    grantid: string,) => [`/api/v1/groups/${gid}/grants${grantid}`];

    
export type UserGetRequestAccessGroupGrantQueryResult = NonNullable<Awaited<ReturnType<typeof userGetRequestAccessGroupGrant>>>
export type UserGetRequestAccessGroupGrantQueryError = ErrorType<ErrorResponseResponse>

export const useUserGetRequestAccessGroupGrant = <TError = ErrorType<ErrorResponseResponse>>(
 gid: string,
    grantid: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof userGetRequestAccessGroupGrant>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstance> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(gid && grantid)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getUserGetRequestAccessGroupGrantKey(gid,grantid) : null);
  const swrFn = () => userGetRequestAccessGroupGrant(gid,grantid, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

